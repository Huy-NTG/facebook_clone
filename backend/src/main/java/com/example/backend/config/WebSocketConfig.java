package com.example.backend.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.server.ServerHttpRequest;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.WebSocketHandler;
import org.springframework.web.socket.config.annotation.*;
import org.springframework.web.socket.server.support.DefaultHandshakeHandler;
import org.springframework.web.util.UriComponentsBuilder;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

import java.security.Principal;
import java.util.Map;
import java.util.UUID;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer{
    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
         // ‚úÖ server c√≥ th·ªÉ g·ª≠i broadcast (/topic/‚Ä¶) **v√†** g·ª≠i ri√™ng (/queue/‚Ä¶)
        config.enableSimpleBroker("/topic", "/queue"); // K√™nh server tr·∫£ d·ªØ li·ªáu v·ªÅ client
        config.setApplicationDestinationPrefixes("/app"); // K√™nh client g·ª≠i l√™n server
        // ‚úÖ Spring s·∫Ω t·ª± bi·∫øn convertAndSendToUser("3", ‚Ä¶)
        // th√†nh /user/3/queue/‚Ä¶
        config.setUserDestinationPrefix("/user");
    }

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/ws") // ƒê∆∞·ªùng d·∫´n k·∫øt n·ªëi t·ª´ frontend
        .setAllowedOriginPatterns("*") // Cho ph√©p t·∫•t c·∫£ c√°c ngu·ªìn g·ªëc (origins) truy c·∫≠p v√†o endpoint n√†y, ƒë√¢y l√† c√°ch k·∫øt n·ªëi th√†nh c√¥ng
        .setHandshakeHandler(customHandshakeHandler()); // üëà
                //.setAllowedOrigins("http://localhost:5173")
                //.withSockJS(); // H·ªó tr·ª£ fallback n·∫øu tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ WebSocket
    }

    /** Tr·∫£ v·ªÅ HandshakeHandler t·ª± g·∫Øn Principal = userId */
    @Bean
    public DefaultHandshakeHandler customHandshakeHandler() {
        return new DefaultHandshakeHandler() {
            @Override
            protected Principal determineUser(ServerHttpRequest req,
                                              WebSocketHandler wsHandler,
                                              Map<String, Object> attrs) {

                // l·∫•y userId t·ª´ query string
                String userId = UriComponentsBuilder.fromUri(req.getURI())
                                   .build()
                                   .getQueryParams()
                                   .getFirst("userId");

                // fallback n·∫øu thi·∫øu
                if (userId == null || userId.isBlank()) {
                    userId = UUID.randomUUID().toString();
                }

                String finalUserId = userId;
                return () -> finalUserId;  // Principal#getName()
            }
        };
    }
}
